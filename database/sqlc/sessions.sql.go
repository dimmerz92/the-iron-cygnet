// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: sessions.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createSession = `-- name: CreateSession :exec
INSERT INTO
	sessions (id, userId, expiry)
VALUES
	(?, ?, ?)
`

type CreateSessionParams struct {
	ID     string
	Userid string
	Expiry int64
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.ExecContext(ctx, createSession, arg.ID, arg.Userid, arg.Expiry)
	return err
}

const deleteExpiredSessions = `-- name: DeleteExpiredSessions :exec
DELETE FROM
	sessions
WHERE
	expiry <= strftime('%s', 'now')
`

func (q *Queries) DeleteExpiredSessions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredSessions)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM
	sessions
WHERE
	id = ?
`

func (q *Queries) DeleteSession(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const getSession = `-- name: GetSession :one
SELECT
	s.id AS sessionId,
	s.expiry,
	u.id AS userId,
	r.name AS role
FROM
	sessions AS s
	LEFT JOIN users AS u ON s.userId = u.id
	LEFT JOIN roles AS r ON u.role = r.id
WHERE
	s.id = ?
`

type GetSessionRow struct {
	Sessionid string
	Expiry    int64
	Userid    sql.NullString
	Role      sql.NullString
}

func (q *Queries) GetSession(ctx context.Context, id string) (GetSessionRow, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i GetSessionRow
	err := row.Scan(
		&i.Sessionid,
		&i.Expiry,
		&i.Userid,
		&i.Role,
	)
	return i, err
}
